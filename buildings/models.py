from django.contrib.admin.sites import AlreadyRegistered
from django.db import models




# Write script to populate  countries and privinces, cities . Add options to inserti entries in here. 
#from the beginning 
class country (models.Model):
    name  =  models.CharField(max_length=50 , primary_key=True) # pk 
    def __str__(self):
        return self.name


class province (models.Model):
    name  =  models.CharField(max_length=50 , primary_key=True)  # pk 
    def __str__(self):
        return self.name


class city (models.Model):
    name  =  models.CharField(max_length=50 , primary_key=True)  # pk 
    def __str__(self):
        return self.name




class location(models.Model) :
    # AutogeneratedP PK 
    country   = models.ForeignKey(country , on_delete=models.CASCADE)
    province  = models.ForeignKey(province , on_delete=models.CASCADE)
    city      = models.ForeignKey(city , on_delete=models.CASCADE)
    
    def __str__(self):
        return  str( self.city ).capitalize()






class property(models.Model) :

    POSSIBLE_STATUS = [
        ('complete', 'Complete'),
        ('incomplete', 'Incomplete'),
        ('depricated', 'Depricated'),
    ]

    POSSIBLE_TYPES= [
        ('venta', 'Venta'),
        ('renta', 'Renta'),
    ]

    POSSIBLE_CATEGORIES= [
        ('departamento', 'Departamento'),
        ('casa', 'Casa'),
        ('terreno', 'Terreno'),
    ]
    #null-> empty is saved as null
    #blanck -> validation form puposes: allows for insertion of empty 
    #PK is autogenerated
    title          = models.CharField(max_length=250, default="")
    status         = models.CharField( max_length=10, choices=POSSIBLE_STATUS, default='incomplete')
    date_posted    = models.DateTimeField(auto_now_add=True)
    category       = models.CharField( max_length=15, choices=POSSIBLE_CATEGORIES, default='casa') # valida values are : casa, apartamento, terreno
    type           = models.CharField( max_length=8, choices=POSSIBLE_TYPES, default='venta') # valid values are renta o venta 
    n_bathrooms    = models.IntegerField(null=True, blank=True) 
    n_bedrooms     = models.IntegerField(null=True, blank=True)   
    n_garages      = models.IntegerField(null=True, blank=True)   
    size           = models.IntegerField(null=True, blank=True)  # MUST be meters squared.  Squared  feet is found at round time
    address        = models.CharField(max_length=250, null=True)
    area           = models.CharField(max_length=250, null=True) # E.g la concepcion 
    postal_code    = models.CharField(max_length=250, null=True)
    location       = models.ForeignKey( location , null=True, on_delete=models.SET_NULL)
    features       = models.CharField(max_length=500, null=True, blank =True ) # each feature is separated with a comma 
    price          = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)
    description    = models.TextField( null=True, blank =True)
    virtualtour_link  = models.CharField(max_length=500, null=True, blank =True, default='')

    def __str__(self):
        return str(self.title)
    
    def get_property_images(self):
        images = property_images.objects.filter(property_id = self.pk)
        return images
    
    def get_principal_images(self):
        principal_image = property_images.objects.filter(property_id = self.pk).first()
        return principal_image

    

    def is_there_virtual_tour(self):
        
        link = self.virtualtour_link
        if link and len(link) >0 :

            return True
        return False 
    
    def get_fromatted_address(self):
        formatted_address = self.address + "," + self.location.city.name
        return formatted_address
    
    def get_string_map_property(self):
        create_complete_addres = self.address + ' ' + self.location.city.name + ' ' + self.location.province.name + ' ' + self.location.country.name
        web_address = self.get_string_iframe(create_complete_addres)
        return web_address
    

    def get_string_iframe(self, address):
        address_T = address
        result = address_T.split()
        web_iframe_url ="https://maps.google.com/maps?q="
        for direction in result:
            web_iframe_url = web_iframe_url + direction + '%20'
        web_iframe_url = web_iframe_url + self.postal_code +'&t=&z=13&ie=UTF8&iwloc=&output=embed'
        return web_iframe_url








#
#Images related
#
class property_images(models.Model):
    property_id = models.ForeignKey(property , on_delete=models.CASCADE)
    img = models.ImageField( upload_to='uploads/')


    @property
    def pictureURL(self):
        try:
            url = self.img.url
        except:
            url = ''
        return url



    